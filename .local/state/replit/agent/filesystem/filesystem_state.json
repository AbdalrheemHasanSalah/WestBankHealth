{"file_contents":{"README.md":{"content":"\"# WestBankHealth\" \n\"# WestBankHealth1\" \n\"# WestBankHealth1\" \n\"# WestBankHealth1\" \n\"# WestBankHealth1\" \n\"# WestBankHealt\" \n\"# WestBankHealt\" \n\"# Health\" \n\"# Health\" \n\"# Health\" \n\"# WestBankHealth\" \n","size_bytes":198},"app.py":{"content":"import os\nfrom flask import Flask, render_template, jsonify, request\nfrom flask_cors import CORS\nfrom flask_sqlalchemy import SQLAlchemy\nfrom datetime import datetime, timedelta\nimport uuid\n\napp = Flask(__name__)\nCORS(app)\n\n# Database configuration\napp.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL')\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n# Database Models\nclass MedicalReferral(db.Model):\n    __tablename__ = 'medical_referrals'\n    \n    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    patient_id = db.Column(db.String(20), nullable=False, index=True)\n    patient_name = db.Column(db.String(100), nullable=False)\n    referral_number = db.Column(db.String(50), nullable=False, unique=True, index=True)\n    destination = db.Column(db.String(200), nullable=False)\n    status = db.Column(db.String(20), nullable=False, default='pending')\n    approval_date = db.Column(db.DateTime, nullable=True)\n    medical_condition = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'patientId': self.patient_id,\n            'patientName': self.patient_name,\n            'referralNumber': self.referral_number,\n            'destination': self.destination,\n            'status': self.status,\n            'approvalDate': self.approval_date.isoformat() if self.approval_date else None,\n            'medicalCondition': self.medical_condition,\n            'createdAt': self.created_at.isoformat()\n        }\n\nclass BorderCrossing(db.Model):\n    __tablename__ = 'border_crossings'\n    \n    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    name = db.Column(db.String(100), nullable=False)\n    name_en = db.Column(db.String(100), nullable=False)\n    status = db.Column(db.String(20), nullable=False, default='open')\n    working_hours = db.Column(db.String(100), nullable=True)\n    last_update = db.Column(db.DateTime, default=datetime.utcnow)\n    notes = db.Column(db.Text, nullable=True)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'nameEn': self.name_en,\n            'status': self.status,\n            'workingHours': self.working_hours,\n            'lastUpdate': self.last_update.isoformat(),\n            'notes': self.notes\n        }\n\nclass Statistics(db.Model):\n    __tablename__ = 'statistics'\n    \n    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    total_referrals = db.Column(db.Integer, nullable=False, default=0)\n    completed_travels = db.Column(db.Integer, nullable=False, default=0)\n    monthly_referrals = db.Column(db.Integer, nullable=False, default=0)\n    pending_referrals = db.Column(db.Integer, nullable=False, default=0)\n    approval_rate = db.Column(db.Integer, nullable=False, default=0)\n    average_processing_days = db.Column(db.Integer, nullable=False, default=0)\n    last_updated = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'totalReferrals': self.total_referrals,\n            'completedTravels': self.completed_travels,\n            'monthlyReferrals': self.monthly_referrals,\n            'pendingReferrals': self.pending_referrals,\n            'approvalRate': self.approval_rate,\n            'averageProcessingDays': self.average_processing_days,\n            'lastUpdated': self.last_updated.isoformat()\n        }\n\n# Initialize database\ndef init_db():\n    \"\"\"Initialize database and create sample data\"\"\"\n    db.create_all()\n    \n    # Check if data already exists\n    if MedicalReferral.query.count() == 0:\n        # Add sample medical referrals\n        referrals_data = [\n            {'patient_id': 'PAT001', 'patient_name': 'أحمد محمد علي', 'referral_number': 'REF2024001',\n             'destination': 'مستشفى القدس - القدس', 'status': 'approved',\n             'approval_date': datetime.now() - timedelta(days=5),\n             'medical_condition': 'جراحة القلب', 'created_at': datetime.now() - timedelta(days=10)},\n            {'patient_id': 'PAT002', 'patient_name': 'فاطمة أحمد حسن', 'referral_number': 'REF2024002',\n             'destination': 'مستشفى الشفاء - غزة', 'status': 'pending',\n             'medical_condition': 'علاج الأورام', 'created_at': datetime.now() - timedelta(days=7)},\n            {'patient_id': 'PAT003', 'patient_name': 'محمد عبد الله قاسم', 'referral_number': 'REF2024003',\n             'destination': 'مستشفى الملك حسين - عمان', 'status': 'local_followup',\n             'approval_date': datetime.now() - timedelta(days=2),\n             'medical_condition': 'جراحة العظام', 'created_at': datetime.now() - timedelta(days=15)},\n            {'patient_id': 'PAT004', 'patient_name': 'سارة محمود خليل', 'referral_number': 'REF2024004',\n             'destination': 'مستشفى الملك فيصل التخصصي - الرياض', 'status': 'approved',\n             'approval_date': datetime.now() - timedelta(days=1),\n             'medical_condition': 'زراعة الكلى', 'created_at': datetime.now() - timedelta(days=20)},\n            {'patient_id': 'PAT005', 'patient_name': 'عمر حسام الدين', 'referral_number': 'REF2024005',\n             'destination': 'مستشفى الجامعة الأردنية - عمان', 'status': 'rejected',\n             'medical_condition': 'علاج طبيعي', 'created_at': datetime.now() - timedelta(days=12)}\n        ]\n        \n        referrals = []\n        for data in referrals_data:\n            referral = MedicalReferral()\n            for key, value in data.items():\n                setattr(referral, key, value)\n            referrals.append(referral)\n        \n        for referral in referrals:\n            db.session.add(referral)\n        \n        # Add border crossings\n        crossings_data = [\n            {'name': 'معبر الكرامة', 'name_en': 'King Hussein Bridge', 'status': 'open',\n             'working_hours': '24 ساعة', 'notes': 'مفتوح للمرضى والمرافقين'},\n            {'name': 'معبر رفح', 'name_en': 'Rafah Crossing', 'status': 'closed',\n             'working_hours': 'مغلق مؤقتاً', 'notes': 'مغلق بسبب الأوضاع الأمنية'},\n            {'name': 'معبر بيت حانون', 'name_en': 'Erez Crossing', 'status': 'restricted',\n             'working_hours': '8:00 - 16:00', 'notes': 'مفتوح للحالات الطبية الطارئة فقط'},\n            {'name': 'معبر القنيطرة', 'name_en': 'Quneitra Crossing', 'status': 'open',\n             'working_hours': '6:00 - 18:00', 'notes': 'مفتوح للحالات الطبية المعتمدة'}\n        ]\n        \n        crossings = []\n        for data in crossings_data:\n            crossing = BorderCrossing()\n            for key, value in data.items():\n                setattr(crossing, key, value)\n            crossings.append(crossing)\n        \n        for crossing in crossings:\n            db.session.add(crossing)\n        \n        # Add statistics\n        stats = Statistics()\n        stats.total_referrals = 1247\n        stats.completed_travels = 892\n        stats.monthly_referrals = 156\n        stats.pending_referrals = 234\n        stats.approval_rate = 78\n        stats.average_processing_days = 12\n        db.session.add(stats)\n        \n        db.session.commit()\n        print(\"✅ Database initialized with sample data!\")\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n# Medical Referrals API Routes\n@app.route('/api/referrals/search')\ndef search_referrals():\n    try:\n        patient_id = request.args.get('patientId', '').strip()\n        referral_number = request.args.get('referralNumber', '').strip()\n        \n        if not patient_id and not referral_number:\n            return jsonify({'message': 'يرجى إدخال رقم الهوية أو رقم التحويلة'}), 400\n        \n        query = MedicalReferral.query\n        \n        if patient_id:\n            query = query.filter(MedicalReferral.patient_id.ilike(f'%{patient_id}%'))\n        \n        if referral_number:\n            query = query.filter(MedicalReferral.referral_number.ilike(f'%{referral_number}%'))\n        \n        referrals = query.all()\n        return jsonify([referral.to_dict() for referral in referrals])\n        \n    except Exception as e:\n        print(f\"Search error: {e}\")\n        return jsonify({'message': 'فشل في البحث عن التحويلات الطبية'}), 500\n\n@app.route('/api/referrals/<referral_id>')\ndef get_referral(referral_id):\n    try:\n        referral = MedicalReferral.query.get(referral_id)\n        if not referral:\n            return jsonify({'message': 'التحويلة الطبية غير موجودة'}), 404\n        return jsonify(referral.to_dict())\n    except Exception as e:\n        print(f\"Get referral error: {e}\")\n        return jsonify({'message': 'فشل في استرجاع التحويلة الطبية'}), 500\n\n@app.route('/api/referrals', methods=['POST'])\ndef create_referral():\n    try:\n        data = request.get_json()\n        \n        # Validation\n        required_fields = ['patientId', 'patientName', 'referralNumber', 'destination', 'medicalCondition']\n        for field in required_fields:\n            if not data.get(field):\n                return jsonify({'message': f'حقل {field} مطلوب'}), 400\n        \n        # Check if referral number already exists\n        existing = MedicalReferral.query.filter_by(referral_number=data['referralNumber']).first()\n        if existing:\n            return jsonify({'message': 'رقم التحويلة موجود بالفعل'}), 409\n        \n        new_referral = MedicalReferral()\n        new_referral.patient_id = data['patientId']\n        new_referral.patient_name = data['patientName']\n        new_referral.referral_number = data['referralNumber']\n        new_referral.destination = data['destination']\n        new_referral.medical_condition = data['medicalCondition']\n        new_referral.status = data.get('status', 'pending')\n        \n        db.session.add(new_referral)\n        db.session.commit()\n        \n        # Update statistics\n        update_statistics()\n        \n        return jsonify(new_referral.to_dict()), 201\n        \n    except Exception as e:\n        db.session.rollback()\n        print(f\"Create referral error: {e}\")\n        return jsonify({'message': 'فشل في إنشاء التحويلة الطبية'}), 500\n\n# Border Crossings API Routes\n@app.route('/api/border-crossings')\ndef get_border_crossings():\n    try:\n        crossings = BorderCrossing.query.all()\n        return jsonify([crossing.to_dict() for crossing in crossings])\n    except Exception as e:\n        print(f\"Get border crossings error: {e}\")\n        return jsonify({'message': 'فشل في استرجاع حالة المعابر'}), 500\n\n@app.route('/api/border-crossings/<crossing_id>', methods=['PUT'])\ndef update_border_crossing(crossing_id):\n    try:\n        crossing = BorderCrossing.query.get(crossing_id)\n        if not crossing:\n            return jsonify({'message': 'المعبر غير موجود'}), 404\n        \n        data = request.get_json()\n        \n        # Update fields\n        if 'status' in data:\n            crossing.status = data['status']\n        if 'workingHours' in data:\n            crossing.working_hours = data['workingHours']\n        if 'notes' in data:\n            crossing.notes = data['notes']\n        \n        crossing.last_update = datetime.utcnow()\n        db.session.commit()\n        \n        return jsonify(crossing.to_dict())\n        \n    except Exception as e:\n        db.session.rollback()\n        print(f\"Update border crossing error: {e}\")\n        return jsonify({'message': 'فشل في تحديث حالة المعبر'}), 500\n\n# Statistics API Routes\n@app.route('/api/statistics')\ndef get_statistics():\n    try:\n        stats = Statistics.query.first()\n        if not stats:\n            # Create default statistics if none exist\n            stats = Statistics()\n            db.session.add(stats)\n            db.session.commit()\n        \n        return jsonify(stats.to_dict())\n    except Exception as e:\n        print(f\"Get statistics error: {e}\")\n        return jsonify({'message': 'فشل في استرجاع الإحصائيات'}), 500\n\ndef update_statistics():\n    \"\"\"Update statistics based on current data\"\"\"\n    try:\n        stats = Statistics.query.first()\n        if not stats:\n            stats = Statistics()\n            db.session.add(stats)\n        \n        # Calculate statistics from actual data\n        stats.total_referrals = MedicalReferral.query.count()\n        stats.completed_travels = MedicalReferral.query.filter_by(status='approved').count()\n        stats.pending_referrals = MedicalReferral.query.filter_by(status='pending').count()\n        \n        # Calculate monthly referrals (last 30 days)\n        thirty_days_ago = datetime.now() - timedelta(days=30)\n        stats.monthly_referrals = MedicalReferral.query.filter(MedicalReferral.created_at >= thirty_days_ago).count()\n        \n        # Calculate approval rate\n        if stats.total_referrals > 0:\n            stats.approval_rate = int((stats.completed_travels / stats.total_referrals) * 100)\n        \n        stats.last_updated = datetime.utcnow()\n        db.session.commit()\n        \n    except Exception as e:\n        db.session.rollback()\n        print(f\"Update statistics error: {e}\")\n\n@app.route('/api/statistics', methods=['PUT'])\ndef update_statistics_manual():\n    try:\n        data = request.get_json()\n        stats = Statistics.query.first()\n        \n        if not stats:\n            return jsonify({'message': 'الإحصائيات غير متوفرة'}), 404\n        \n        # Update provided fields\n        for field, value in data.items():\n            if hasattr(stats, field.lower().replace('R', 'r')):  # Handle camelCase\n                setattr(stats, field.lower().replace('R', 'r'), value)\n        \n        stats.last_updated = datetime.utcnow()\n        db.session.commit()\n        \n        return jsonify(stats.to_dict())\n        \n    except Exception as e:\n        db.session.rollback()\n        print(f\"Update statistics error: {e}\")\n        return jsonify({'message': 'فشل في تحديث الإحصائيات'}), 500\n\n# Test route to check database connection\n@app.route('/api/test')\ndef test_db():\n    try:\n        # Test database connection\n        referrals_count = MedicalReferral.query.count()\n        crossings_count = BorderCrossing.query.count()\n        \n        return jsonify({\n            'message': 'Database connection successful! ✅',\n            'referrals_count': referrals_count,\n            'crossings_count': crossings_count,\n            'database_url': os.environ.get('DATABASE_URL', 'Not set')[:50] + '...'\n        })\n    except Exception as e:\n        return jsonify({\n            'message': f'Database connection failed: {str(e)}',\n            'error': str(e)\n        }), 500\n\nif __name__ == '__main__':\n    with app.app_context():\n        init_db()\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":15357},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask>=3.1.2\",\n    \"flask-cors>=6.0.1\",\n    \"pymysql>=1.1.2\",\n    \"python-dotenv>=1.1.1\",\n    \"sqlalchemy>=2.0.43\",\n    \"psycopg2-binary>=2.9.10\",\n    \"email-validator>=2.3.0\",\n    \"gunicorn>=23.0.0\",\n]\n","size_bytes":381},"replit.md":{"content":"# Medical Referrals System\n\n## Overview\n\nThis is a medical referrals management system for the Palestinian Ministry of Health in the West Bank. The application serves as a public portal for citizens to search and track their medical referrals, view border crossing statuses, and access important guidelines and information about the medical referral process. The system is built with Arabic language support and features a clean, accessible interface designed for healthcare administration.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design system\n- **Routing**: Wouter for client-side routing (lightweight alternative to React Router)\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Radix UI primitives with custom styling through shadcn/ui\n- **Internationalization**: Arabic-first design with RTL support and Arabic fonts (Noto Sans Arabic)\n\nThe frontend follows a component-based architecture with reusable UI components, custom hooks, and a clean separation of concerns between presentation and business logic.\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API endpoints for medical referrals, border crossings, and statistics\n- **Development Setup**: Hot reload with Vite integration during development\n- **Build Process**: esbuild for production bundling with external package handling\n\nThe backend implements a simple Express server with structured routing and middleware for request logging and error handling.\n\n### Data Storage Solutions\n- **Database**: PostgreSQL using Neon serverless database\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Connection Pooling**: Neon serverless connection pooling for optimal performance\n- **Schema Management**: Drizzle migrations for database schema versioning\n- **Development Storage**: In-memory storage implementation for development and testing\n\nThe data layer uses a repository pattern with an abstraction layer (IStorage interface) allowing for different storage implementations.\n\n### Authentication and Authorization\nCurrently, the application is designed as a public portal without authentication requirements. Citizens can search for referrals using patient ID or referral number without login credentials, following the public service model for healthcare information access.\n\n### API Structure\nThe REST API follows a resource-based structure:\n- `/api/referrals` - Medical referral management (search, retrieve, create)\n- `/api/border-crossings` - Border crossing status information\n- `/api/statistics` - System statistics and metrics\n\nError handling includes proper HTTP status codes and Arabic error messages for user-facing responses.\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL database hosting\n- **Connection**: WebSocket-based connections through Neon serverless client\n\n### Development Tools\n- **Replit Integration**: Specialized Vite plugins for Replit development environment\n- **Development Plugins**: Error overlay modal and cartographer for enhanced development experience\n\n### UI and Styling Dependencies\n- **Radix UI**: Comprehensive set of accessible React components\n- **Tailwind CSS**: Utility-first CSS framework with custom color scheme\n- **Lucide React**: Icon library for consistent iconography\n- **Google Fonts**: Arabic font families (Noto Sans Arabic) for proper RTL text rendering\n\n### Build and Development\n- **Vite**: Fast build tool with Hot Module Replacement\n- **TypeScript**: Type safety across the entire stack\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Form Handling and Validation\n- **React Hook Form**: Performant form management\n- **Zod**: Schema validation library integrated with Drizzle\n- **Hookform Resolvers**: Integration between React Hook Form and Zod validation\n\nThe system emphasizes developer experience with comprehensive tooling while maintaining a focus on accessibility and internationalization for Arabic-speaking users.","size_bytes":4368},"static/css/style.css":{"content":"/* Modern CSS for Medical Referrals System */\n:root {\n  /* Color Palette */\n  --primary-color: #1e40af;\n  --primary-hover: #1e3a8a;\n  --secondary-color: #059669;\n  --accent-color: #dc2626;\n  --warning-color: #d97706;\n  --success-color: #16a34a;\n  \n  /* Background Colors */\n  --bg-primary: #ffffff;\n  --bg-secondary: #f8fafc;\n  --bg-card: #ffffff;\n  --bg-hover: #f1f5f9;\n  \n  /* Text Colors */\n  --text-primary: #1e293b;\n  --text-secondary: #64748b;\n  --text-muted: #94a3b8;\n  \n  /* Border Colors */\n  --border-color: #e2e8f0;\n  --border-hover: #cbd5e1;\n  \n  /* Shadows */\n  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n  \n  /* Spacing */\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --spacing-md: 1rem;\n  --spacing-lg: 1.5rem;\n  --spacing-xl: 2rem;\n  --spacing-2xl: 3rem;\n  \n  /* Typography */\n  --font-family: 'Noto Sans Arabic', sans-serif;\n  --font-size-xs: 0.75rem;\n  --font-size-sm: 0.875rem;\n  --font-size-base: 1rem;\n  --font-size-lg: 1.125rem;\n  --font-size-xl: 1.25rem;\n  --font-size-2xl: 1.5rem;\n  --font-size-3xl: 2rem;\n  \n  /* Border Radius */\n  --radius-sm: 0.375rem;\n  --radius-md: 0.5rem;\n  --radius-lg: 0.75rem;\n  --radius-xl: 1rem;\n}\n\n/* Dark Theme */\n[data-theme=\"dark\"] {\n  --bg-primary: #0f172a;\n  --bg-secondary: #1e293b;\n  --bg-card: #1e293b;\n  --bg-hover: #334155;\n  \n  --text-primary: #f1f5f9;\n  --text-secondary: #cbd5e1;\n  --text-muted: #94a3b8;\n  \n  --border-color: #334155;\n  --border-hover: #475569;\n}\n\n/* Base Styles */\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 16px;\n  scroll-behavior: smooth;\n}\n\nbody {\n  font-family: var(--font-family);\n  font-size: var(--font-size-base);\n  line-height: 1.6;\n  color: var(--text-primary);\n  background-color: var(--bg-secondary);\n  direction: rtl;\n  text-align: right;\n  transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 var(--spacing-md);\n}\n\n/* Header */\n.header {\n  background: linear-gradient(135deg, var(--primary-color) 0%, #3b82f6 100%);\n  color: white;\n  padding: var(--spacing-lg) 0;\n  box-shadow: var(--shadow-md);\n  position: sticky;\n  top: 0;\n  z-index: 100;\n}\n\n.header-content {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: var(--spacing-md);\n}\n\n.logo-section {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-md);\n}\n\n.logo {\n  font-size: var(--font-size-3xl);\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n}\n\n.header-text h1 {\n  font-size: var(--font-size-2xl);\n  font-weight: 700;\n  margin-bottom: var(--spacing-xs);\n}\n\n.header-text p {\n  font-size: var(--font-size-sm);\n  opacity: 0.9;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-md);\n}\n\n.theme-toggle {\n  cursor: pointer;\n  padding: var(--spacing-sm);\n  border-radius: var(--radius-md);\n  background: rgba(255, 255, 255, 0.1);\n  transition: background 0.3s ease, transform 0.2s ease;\n  font-size: var(--font-size-lg);\n}\n\n.theme-toggle:hover {\n  background: rgba(255, 255, 255, 0.2);\n  transform: scale(1.1);\n}\n\n/* Main Content */\n.main {\n  padding: var(--spacing-xl) 0;\n}\n\n/* Cards */\n.card {\n  background: var(--bg-card);\n  border-radius: var(--radius-lg);\n  box-shadow: var(--shadow-md);\n  border: 1px solid var(--border-color);\n  transition: all 0.3s ease;\n  overflow: hidden;\n  margin-bottom: var(--spacing-xl);\n}\n\n.card:hover {\n  box-shadow: var(--shadow-xl);\n  transform: translateY(-2px);\n}\n\n.card-content {\n  padding: var(--spacing-xl);\n}\n\n/* Section Titles */\n.section-title {\n  font-size: var(--font-size-xl);\n  font-weight: 600;\n  color: var(--text-primary);\n  margin-bottom: var(--spacing-lg);\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n}\n\n.section-description {\n  color: var(--text-secondary);\n  margin-bottom: var(--spacing-lg);\n  font-size: var(--font-size-sm);\n}\n\n/* Search Section */\n.search-form {\n  display: grid;\n  grid-template-columns: 1fr 1fr auto;\n  gap: var(--spacing-md);\n  align-items: end;\n  margin-bottom: var(--spacing-lg);\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-sm);\n}\n\n.form-group label {\n  font-weight: 500;\n  color: var(--text-primary);\n  font-size: var(--font-size-sm);\n}\n\n.form-group input {\n  padding: var(--spacing-md);\n  border: 2px solid var(--border-color);\n  border-radius: var(--radius-md);\n  font-size: var(--font-size-base);\n  font-family: var(--font-family);\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  transition: all 0.3s ease;\n  direction: rtl;\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: var(--primary-color);\n  box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.1);\n}\n\n.form-group input::placeholder {\n  color: var(--text-muted);\n}\n\n/* Buttons */\n.btn-primary {\n  background: linear-gradient(135deg, var(--primary-color) 0%, #3b82f6 100%);\n  color: white;\n  border: none;\n  padding: var(--spacing-md) var(--spacing-xl);\n  border-radius: var(--radius-md);\n  font-size: var(--font-size-base);\n  font-weight: 500;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n  transition: all 0.3s ease;\n  font-family: var(--font-family);\n  min-height: 52px;\n}\n\n.btn-primary:hover {\n  background: var(--primary-hover);\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-lg);\n}\n\n.btn-icon {\n  font-size: var(--font-size-lg);\n}\n\n/* Search Results */\n.search-results {\n  display: none;\n}\n\n.search-results.show {\n  display: block;\n  margin-top: var(--spacing-lg);\n}\n\n.referral-item {\n  background: var(--bg-hover);\n  border: 1px solid var(--border-color);\n  border-radius: var(--radius-md);\n  padding: var(--spacing-lg);\n  margin-bottom: var(--spacing-md);\n  transition: all 0.3s ease;\n}\n\n.referral-item:hover {\n  border-color: var(--primary-color);\n  transform: translateX(5px);\n}\n\n.referral-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: start;\n  margin-bottom: var(--spacing-md);\n  gap: var(--spacing-md);\n}\n\n.referral-info h4 {\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  margin-bottom: var(--spacing-xs);\n}\n\n.referral-info p {\n  color: var(--text-secondary);\n  font-size: var(--font-size-sm);\n}\n\n.status-badge {\n  padding: var(--spacing-xs) var(--spacing-sm);\n  border-radius: var(--radius-sm);\n  font-size: var(--font-size-xs);\n  font-weight: 500;\n  white-space: nowrap;\n}\n\n.status-approved {\n  background: #dcfce7;\n  color: #16a34a;\n}\n\n.status-pending {\n  background: #fef3c7;\n  color: #d97706;\n}\n\n.status-local_followup {\n  background: #dbeafe;\n  color: #2563eb;\n}\n\n.status-rejected {\n  background: #fee2e2;\n  color: #dc2626;\n}\n\n/* Alert */\n.alert-info {\n  background: #dbeafe;\n  border: 1px solid #93c5fd;\n  border-radius: var(--radius-md);\n  padding: var(--spacing-lg);\n  display: flex;\n  align-items: start;\n  gap: var(--spacing-md);\n}\n\n.alert-icon {\n  font-size: var(--font-size-lg);\n  flex-shrink: 0;\n}\n\n/* Grid Layouts */\n.grid-two-cols {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--spacing-xl);\n  margin-bottom: var(--spacing-xl);\n}\n\n.guidelines-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  gap: var(--spacing-lg);\n}\n\n.guideline-item {\n  display: flex;\n  gap: var(--spacing-md);\n  padding: var(--spacing-lg);\n  background: var(--bg-hover);\n  border-radius: var(--radius-md);\n  border: 1px solid var(--border-color);\n  transition: all 0.3s ease;\n}\n\n.guideline-item:hover {\n  border-color: var(--primary-color);\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-md);\n}\n\n.guideline-icon {\n  font-size: var(--font-size-2xl);\n  flex-shrink: 0;\n}\n\n.guideline-content h4 {\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  margin-bottom: var(--spacing-xs);\n  color: var(--text-primary);\n}\n\n.guideline-content p {\n  color: var(--text-secondary);\n  font-size: var(--font-size-sm);\n  line-height: 1.5;\n}\n\n/* Statistics */\n.statistics-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: var(--spacing-lg);\n}\n\n.stat-item {\n  text-align: center;\n  padding: var(--spacing-lg);\n  background: var(--bg-hover);\n  border-radius: var(--radius-md);\n  border: 1px solid var(--border-color);\n  transition: all 0.3s ease;\n}\n\n.stat-item:hover {\n  transform: scale(1.05);\n  box-shadow: var(--shadow-md);\n}\n\n.stat-value {\n  font-size: var(--font-size-2xl);\n  font-weight: 700;\n  color: var(--primary-color);\n  margin-bottom: var(--spacing-xs);\n}\n\n.stat-label {\n  font-size: var(--font-size-sm);\n  color: var(--text-secondary);\n  font-weight: 500;\n}\n\n/* Border Crossings */\n.border-crossings-list {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-md);\n}\n\n.crossing-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: var(--spacing-lg);\n  background: var(--bg-hover);\n  border-radius: var(--radius-md);\n  border: 1px solid var(--border-color);\n  transition: all 0.3s ease;\n  gap: var(--spacing-md);\n}\n\n.crossing-item:hover {\n  transform: translateX(5px);\n  border-color: var(--primary-color);\n}\n\n.crossing-info h4 {\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  margin-bottom: var(--spacing-xs);\n}\n\n.crossing-info p {\n  color: var(--text-secondary);\n  font-size: var(--font-size-sm);\n}\n\n.crossing-status {\n  padding: var(--spacing-xs) var(--spacing-sm);\n  border-radius: var(--radius-sm);\n  font-size: var(--font-size-xs);\n  font-weight: 500;\n  white-space: nowrap;\n}\n\n.crossing-open {\n  background: #dcfce7;\n  color: #16a34a;\n}\n\n.crossing-closed {\n  background: #fee2e2;\n  color: #dc2626;\n}\n\n.crossing-restricted {\n  background: #fef3c7;\n  color: #d97706;\n}\n\n/* FAQ */\n.faq-list {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-md);\n}\n\n.faq-item {\n  border: 1px solid var(--border-color);\n  border-radius: var(--radius-md);\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.faq-question {\n  padding: var(--spacing-lg);\n  background: var(--bg-hover);\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-weight: 500;\n  gap: var(--spacing-md);\n  transition: all 0.3s ease;\n}\n\n.faq-question:hover {\n  background: var(--border-hover);\n}\n\n.faq-toggle {\n  font-size: var(--font-size-xl);\n  font-weight: 700;\n  transition: transform 0.3s ease;\n}\n\n.faq-item.active .faq-toggle {\n  transform: rotate(45deg);\n}\n\n.faq-answer {\n  padding: 0 var(--spacing-lg);\n  max-height: 0;\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.faq-item.active .faq-answer {\n  padding: var(--spacing-lg);\n  max-height: 200px;\n}\n\n/* Quick Links */\n.links-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: var(--spacing-lg);\n}\n\n.link-card {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-md);\n  padding: var(--spacing-lg);\n  background: var(--bg-hover);\n  border: 1px solid var(--border-color);\n  border-radius: var(--radius-md);\n  text-decoration: none;\n  color: inherit;\n  transition: all 0.3s ease;\n}\n\n.link-card:hover {\n  border-color: var(--primary-color);\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-md);\n}\n\n.link-icon {\n  font-size: var(--font-size-2xl);\n  flex-shrink: 0;\n}\n\n.link-title {\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  margin-bottom: var(--spacing-xs);\n  color: var(--text-primary);\n}\n\n.link-description {\n  font-size: var(--font-size-sm);\n  color: var(--text-secondary);\n}\n\n/* Footer */\n.footer {\n  background: var(--bg-card);\n  border-top: 1px solid var(--border-color);\n  padding: var(--spacing-2xl) 0 var(--spacing-lg);\n  margin-top: var(--spacing-2xl);\n}\n\n.footer-content {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: var(--spacing-xl);\n  margin-bottom: var(--spacing-xl);\n}\n\n.footer-section h4 {\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  margin-bottom: var(--spacing-md);\n  color: var(--text-primary);\n}\n\n.footer-section p,\n.footer-section ul {\n  color: var(--text-secondary);\n  font-size: var(--font-size-sm);\n}\n\n.footer-section ul {\n  list-style: none;\n}\n\n.footer-section ul li {\n  margin-bottom: var(--spacing-xs);\n}\n\n.footer-section a {\n  color: var(--text-secondary);\n  text-decoration: none;\n  transition: color 0.3s ease;\n}\n\n.footer-section a:hover {\n  color: var(--primary-color);\n}\n\n.footer-bottom {\n  text-align: center;\n  padding-top: var(--spacing-lg);\n  border-top: 1px solid var(--border-color);\n  color: var(--text-muted);\n  font-size: var(--font-size-sm);\n}\n\n/* Loading Animation */\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: var(--spacing-xl);\n}\n\n.loading::after {\n  content: '';\n  width: 30px;\n  height: 30px;\n  border: 3px solid var(--border-color);\n  border-top: 3px solid var(--primary-color);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .header-content {\n    flex-direction: column;\n    text-align: center;\n    gap: var(--spacing-md);\n  }\n  \n  .search-form {\n    grid-template-columns: 1fr;\n    gap: var(--spacing-md);\n  }\n  \n  .grid-two-cols {\n    grid-template-columns: 1fr;\n  }\n  \n  .guidelines-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .links-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .statistics-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .container {\n    padding: 0 var(--spacing-sm);\n  }\n  \n  .card-content {\n    padding: var(--spacing-lg);\n  }\n  \n  .section-title {\n    font-size: var(--font-size-lg);\n  }\n  \n  .footer-content {\n    grid-template-columns: 1fr;\n    text-align: center;\n  }\n}\n\n@media (max-width: 480px) {\n  .statistics-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .referral-header {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .crossing-item {\n    flex-direction: column;\n    align-items: stretch;\n    text-align: center;\n  }\n}\n\n/* Accessibility */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* Print Styles */\n@media print {\n  .header-actions,\n  .search-form,\n  .footer {\n    display: none;\n  }\n  \n  .card {\n    box-shadow: none;\n    border: 1px solid #000;\n  }\n}","size_bytes":14571},"static/js/script.js":{"content":"// Medical Referrals System JavaScript\n\n// Global variables\nlet currentTheme = localStorage.getItem('theme') || 'light';\nlet borderCrossings = [];\nlet statistics = {};\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeTheme();\n    initializeEventListeners();\n    loadBorderCrossings();\n    loadStatistics();\n});\n\n// Theme Management\nfunction initializeTheme() {\n    document.documentElement.setAttribute('data-theme', currentTheme);\n    updateThemeToggle();\n}\n\nfunction toggleTheme() {\n    currentTheme = currentTheme === 'light' ? 'dark' : 'light';\n    document.documentElement.setAttribute('data-theme', currentTheme);\n    localStorage.setItem('theme', currentTheme);\n    updateThemeToggle();\n}\n\nfunction updateThemeToggle() {\n    const themeToggle = document.querySelector('.theme-toggle');\n    if (themeToggle) {\n        themeToggle.textContent = currentTheme === 'light' ? '🌙' : '☀️';\n    }\n}\n\n// Event Listeners\nfunction initializeEventListeners() {\n    // Search form\n    const searchForm = document.getElementById('searchForm');\n    if (searchForm) {\n        searchForm.addEventListener('submit', handleSearch);\n    }\n\n    // FAQ toggles\n    const faqQuestions = document.querySelectorAll('.faq-question');\n    faqQuestions.forEach(question => {\n        question.addEventListener('click', () => toggleFAQ(question));\n    });\n\n    // Auto-refresh border crossings every 5 minutes\n    setInterval(loadBorderCrossings, 300000);\n}\n\n// Search functionality\nasync function handleSearch(event) {\n    event.preventDefault();\n    \n    const formData = new FormData(event.target);\n    const patientId = formData.get('patientId').trim();\n    const referralNumber = formData.get('referralNumber').trim();\n    \n    if (!patientId && !referralNumber) {\n        showAlert('يرجى إدخال رقم الهوية أو رقم التحويلة للبحث', 'warning');\n        return;\n    }\n    \n    const searchResults = document.getElementById('searchResults');\n    searchResults.innerHTML = '<div class=\"loading\"></div>';\n    searchResults.classList.add('show');\n    \n    try {\n        const params = new URLSearchParams();\n        if (patientId) params.append('patientId', patientId);\n        if (referralNumber) params.append('referralNumber', referralNumber);\n        \n        const response = await fetch(`/api/referrals/search?${params}`);\n        \n        if (!response.ok) {\n            throw new Error('فشل في البحث');\n        }\n        \n        const referrals = await response.json();\n        displaySearchResults(referrals);\n        \n    } catch (error) {\n        console.error('Search error:', error);\n        searchResults.innerHTML = `\n            <div class=\"alert-info\" style=\"background: #fee2e2; border-color: #fecaca;\">\n                <div class=\"alert-icon\">⚠️</div>\n                <p>حدث خطأ أثناء البحث. يرجى المحاولة مرة أخرى.</p>\n            </div>\n        `;\n    }\n}\n\nfunction displaySearchResults(referrals) {\n    const searchResults = document.getElementById('searchResults');\n    \n    if (referrals.length === 0) {\n        searchResults.innerHTML = `\n            <div class=\"alert-info\" style=\"background: #fef3c7; border-color: #fcd34d;\">\n                <div class=\"alert-icon\">🔍</div>\n                <p>لا توجد تحويلات طبية مطابقة لمعايير البحث.</p>\n            </div>\n        `;\n        return;\n    }\n    \n    const resultsHTML = referrals.map(referral => `\n        <div class=\"referral-item\">\n            <div class=\"referral-header\">\n                <div class=\"referral-info\">\n                    <h4>${referral.patientName}</h4>\n                    <p>رقم الهوية: ${referral.patientId} | رقم التحويلة: ${referral.referralNumber}</p>\n                    <p>الوجهة: ${referral.destination}</p>\n                    <p>الحالة الطبية: ${referral.medicalCondition}</p>\n                </div>\n                <div class=\"status-badge status-${referral.status}\">\n                    ${getStatusText(referral.status)}\n                </div>\n            </div>\n            <div style=\"font-size: 0.875rem; color: var(--text-secondary);\">\n                <p>تاريخ الإنشاء: ${formatDate(referral.createdAt)}</p>\n                ${referral.approvalDate ? `<p>تاريخ الموافقة: ${formatDate(referral.approvalDate)}</p>` : ''}\n            </div>\n        </div>\n    `).join('');\n    \n    searchResults.innerHTML = resultsHTML;\n}\n\nfunction getStatusText(status) {\n    const statusMap = {\n        'pending': 'قيد المراجعة',\n        'approved': 'موافق عليها',\n        'local_followup': 'متابعة محلية',\n        'rejected': 'مرفوضة'\n    };\n    return statusMap[status] || status;\n}\n\n// Border Crossings\nasync function loadBorderCrossings() {\n    try {\n        const response = await fetch('/api/border-crossings');\n        \n        if (!response.ok) {\n            throw new Error('فشل في تحميل بيانات المعابر');\n        }\n        \n        borderCrossings = await response.json();\n        displayBorderCrossings();\n        \n    } catch (error) {\n        console.error('Border crossings error:', error);\n        document.getElementById('borderCrossings').innerHTML = `\n            <div class=\"alert-info\" style=\"background: #fee2e2; border-color: #fecaca;\">\n                <div class=\"alert-icon\">⚠️</div>\n                <p>خطأ في تحميل بيانات المعابر</p>\n            </div>\n        `;\n    }\n}\n\nfunction displayBorderCrossings() {\n    const container = document.getElementById('borderCrossings');\n    \n    const crossingsHTML = borderCrossings.map(crossing => `\n        <div class=\"crossing-item\">\n            <div class=\"crossing-info\">\n                <h4>${crossing.name}</h4>\n                <p>${crossing.nameEn}</p>\n                <p>ساعات العمل: ${crossing.workingHours || 'غير محددة'}</p>\n                ${crossing.notes ? `<p>ملاحظات: ${crossing.notes}</p>` : ''}\n                <p style=\"font-size: 0.75rem; color: var(--text-muted);\">\n                    آخر تحديث: ${formatDate(crossing.lastUpdate)}\n                </p>\n            </div>\n            <div class=\"crossing-status crossing-${crossing.status}\">\n                ${getCrossingStatusText(crossing.status)}\n            </div>\n        </div>\n    `).join('');\n    \n    container.innerHTML = crossingsHTML;\n}\n\nfunction getCrossingStatusText(status) {\n    const statusMap = {\n        'open': 'مفتوح',\n        'closed': 'مغلق',\n        'restricted': 'مقيد'\n    };\n    return statusMap[status] || status;\n}\n\n// Statistics\nasync function loadStatistics() {\n    try {\n        const response = await fetch('/api/statistics');\n        \n        if (!response.ok) {\n            throw new Error('فشل في تحميل الإحصائيات');\n        }\n        \n        statistics = await response.json();\n        displayStatistics();\n        \n    } catch (error) {\n        console.error('Statistics error:', error);\n        document.getElementById('statistics').innerHTML = `\n            <div class=\"alert-info\" style=\"background: #fee2e2; border-color: #fecaca;\">\n                <div class=\"alert-icon\">⚠️</div>\n                <p>خطأ في تحميل الإحصائيات</p>\n            </div>\n        `;\n    }\n}\n\nfunction displayStatistics() {\n    const container = document.getElementById('statistics');\n    \n    const statsHTML = `\n        <div class=\"stat-item\">\n            <div class=\"stat-value\">${statistics.totalReferrals.toLocaleString('ar')}</div>\n            <div class=\"stat-label\">إجمالي التحويلات</div>\n        </div>\n        <div class=\"stat-item\">\n            <div class=\"stat-value\">${statistics.completedTravels.toLocaleString('ar')}</div>\n            <div class=\"stat-label\">السفرات المكتملة</div>\n        </div>\n        <div class=\"stat-item\">\n            <div class=\"stat-value\">${statistics.monthlyReferrals.toLocaleString('ar')}</div>\n            <div class=\"stat-label\">تحويلات هذا الشهر</div>\n        </div>\n        <div class=\"stat-item\">\n            <div class=\"stat-value\">${statistics.pendingReferrals.toLocaleString('ar')}</div>\n            <div class=\"stat-label\">في الانتظار</div>\n        </div>\n        <div class=\"stat-item\">\n            <div class=\"stat-value\">%${statistics.approvalRate.toLocaleString('ar')}</div>\n            <div class=\"stat-label\">معدل الموافقة</div>\n        </div>\n        <div class=\"stat-item\">\n            <div class=\"stat-value\">${statistics.averageProcessingDays.toLocaleString('ar')} يوم</div>\n            <div class=\"stat-label\">متوسط المعالجة</div>\n        </div>\n    `;\n    \n    container.innerHTML = statsHTML;\n}\n\n// FAQ functionality\nfunction toggleFAQ(questionElement) {\n    const faqItem = questionElement.parentElement;\n    const isActive = faqItem.classList.contains('active');\n    \n    // Close all FAQ items\n    document.querySelectorAll('.faq-item').forEach(item => {\n        item.classList.remove('active');\n    });\n    \n    // If it wasn't active, open it\n    if (!isActive) {\n        faqItem.classList.add('active');\n    }\n}\n\n// Utility functions\nfunction formatDate(dateString) {\n    if (!dateString) return 'غير محدد';\n    \n    try {\n        const date = new Date(dateString);\n        return new Intl.DateTimeFormat('ar-SA', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n        }).format(date);\n    } catch (error) {\n        return 'تاريخ غير صحيح';\n    }\n}\n\nfunction showAlert(message, type = 'info') {\n    // Create alert element\n    const alert = document.createElement('div');\n    alert.className = `alert-${type}`;\n    alert.style.position = 'fixed';\n    alert.style.top = '20px';\n    alert.style.right = '20px';\n    alert.style.zIndex = '1000';\n    alert.style.padding = 'var(--spacing-md)';\n    alert.style.borderRadius = 'var(--radius-md)';\n    alert.style.boxShadow = 'var(--shadow-lg)';\n    alert.innerHTML = `\n        <div style=\"display: flex; align-items: center; gap: var(--spacing-sm);\">\n            <span>${type === 'warning' ? '⚠️' : type === 'error' ? '❌' : 'ℹ️'}</span>\n            <span>${message}</span>\n        </div>\n    `;\n    \n    document.body.appendChild(alert);\n    \n    // Remove alert after 5 seconds\n    setTimeout(() => {\n        if (alert.parentNode) {\n            alert.parentNode.removeChild(alert);\n        }\n    }, 5000);\n}\n\n// Smooth scrolling for anchor links\ndocument.addEventListener('click', function(e) {\n    if (e.target.tagName === 'A' && e.target.getAttribute('href').startsWith('#')) {\n        e.preventDefault();\n        const target = document.querySelector(e.target.getAttribute('href'));\n        if (target) {\n            target.scrollIntoView({ behavior: 'smooth' });\n        }\n    }\n});\n\n// Keyboard navigation support\ndocument.addEventListener('keydown', function(e) {\n    // ESC key to close active FAQ\n    if (e.key === 'Escape') {\n        document.querySelectorAll('.faq-item.active').forEach(item => {\n            item.classList.remove('active');\n        });\n    }\n    \n    // Enter key on FAQ questions\n    if (e.key === 'Enter' && e.target.classList.contains('faq-question')) {\n        toggleFAQ(e.target);\n    }\n});\n\n// Add keyboard navigation to FAQ questions\ndocument.querySelectorAll('.faq-question').forEach(question => {\n    question.setAttribute('tabindex', '0');\n    question.setAttribute('role', 'button');\n    question.setAttribute('aria-expanded', 'false');\n});\n\n// Update aria-expanded when FAQ is toggled\nconst originalToggleFAQ = window.toggleFAQ;\nwindow.toggleFAQ = function(questionElement) {\n    const wasActive = questionElement.parentElement.classList.contains('active');\n    originalToggleFAQ(questionElement);\n    questionElement.setAttribute('aria-expanded', !wasActive);\n};","size_bytes":12078}},"version":1}